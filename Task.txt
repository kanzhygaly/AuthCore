“естовое задание дл€ JAVA EE Developer

Ќеобходимо реализовать серверное приложение  осуществл€ющее операцию аутентификации пользовател€. 

¬заимодействие клиент/сервер происходит по протоколу webSocket(http://ru.wikipedia.org/wiki/WebSocket). «апросы к серверу и ответы от него передаютс€ в формате JSON(http://ru.wikipedia.org/wiki/JSON). 

ѕриложение должно обеспечивать следующие процессы:
Ч аутентификацию пользовател€
Ч приложение должно принимать запрос LOGIN_CUSTOMER провер€ть наличие данного пользовател€ в базе с указанным паролем и возвращать либо сообщение об успешно аутентификации с токеном и датой его истечени€, либо сообщение об ошибке
Ч хранение токенов пользователей 
Ч приложение должно вести базу выданных пользовател€м токенов.
Ч приложение должно вести историю токенов пользователей.
Ч приложение должно сбрасывать токен пользовател€ если он запрашивает повторную аутентификацию.

ќписание протокола 

ќписание структуры исход€щего сообщени€:
{ 
  УtypeФ: УTYPE_OF_MESSAGEФ , // строка, тип сообщени€
  Уsequence_idФ: У09caaa73-b2b1-187e-2b24-683550a49b23Ф, // строка, идентификатор св€занности сообщений
  УdataФ : {} // объект, содержит данные запроса
}

ќписание структуры вход€щего сообщени€:
{ 
  УtypeФ: УTYPE_OF_MESSAGEФ , // строка, тип сообщени€
  Уsequence_idФ: У09caaa73-b2b1-187e-2b24-683550a49b23Ф, // строка, идентификатор св€занности сообщений
  УdataФ : {} // объект, содержит данные ответа
}

¬ случае возврата сообщени€ об ошибке, объект data должен содержать следующие пол€:
"error_description":"Customer not foundФ, // поле с описанием ошибки
"error_code":"customer.notFoundФ // поле с кодом ошибки

«апрос дл€ успешной операции аутентификации:
{
  "type":"LOGIN_CUSTOMERФ,
  "sequence_id":"a29e4fd0-581d-e06b-c837-4f5f4be7dd18Ф,
  "dataФ:{
    "email":"fpi@bk.ruФ,
    "password":Ф123123"
  }
}

ќтвет дл€ успешной операции аутентификации: 
{
  "type":"CUSTOMER_API_TOKENФ,
  "sequence_id":"cbf187c9-8679-0359-eb3d-c3211ee51a15Ф,
  "dataФ:{
    "api_token":"afdd312c-3d2a-45ee-aa61-468aba3397f3Ф,
    "api_token_expiration_date":"2015-07-15T11:14:30ZФ
  }
}

«апрос дл€ не успешной операции аутентификации: 
{
  "type":"LOGIN_CUSTOMER",
  "sequence_id":"715c13b3-881a-9c97-b853-10be585a9747Ф,
  "dataФ:{
    "email":"123@gmail.comФ,
    "password":ФnewPassword"
  }
}

ќтвет дл€ не успешной операции аутентификации: 
{
  "type":"CUSTOMER_ERRORФ,
  "sequence_id":"715c13b3-881a-9c97-b853-10be585a9747Ф,
  "dataФ:{
    "error_description":"Customer not foundФ,
    "error_code":"customer.notFoundФ
  }
}

–азрешаетс€ использовать любые фреймворки, а так же maven и gradle.
Application Server на выбор, предпочтение отдаетс€ wildfly.
ѕроект необходимо предоставить целиком.

Ќеобходимо самосто€тельно организовать:
Ч поддержку св€занности сообщений, в описании протокола средства дл€ этого заложены
Ч обработку ошибок;
Ч работу с Ѕƒ;
Ч по необходимости работу с конфигурационными файлами;
Ч по необходимости работу с WebSocket сесси€ми
Ч приложение должно быть готово к работе большого числа пользователей через разные WebSocket сессии.
